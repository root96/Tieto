find_program(CLANG_TIDY NAMES "clang-tidy" "clang-tidy-4.0")
find_program(CLANG_FORMAT NAMES "clang-format" "clang-format-4.0")

message(STATUS "clang-format found: ${CLANG_FORMAT}")
message(STATUS "clang-tidy found: ${CLANG_TIDY}")

macro(get_gcc_compile_flags target flags)
  string(TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" name)
  set(flags "${${name}} ${CMAKE_CXX_COMPILER_ARG1}")
  get_target_property(value ${target} COMPILE_FLAGS)
  if (value)
    list(APPEND flags ${value})
  endif()
  get_target_property(value ${target} TYPE)
  get_target_property(value ${target} COMPILE_DEFINITIONS)
  if (value)
    foreach(item ${value})
      list(APPEND flags "-D${item}")
    endforeach()
  endif()
  STRING(TOUPPER "COMPILE_DEFINITIONS_${CMAKE_BUILD_TYPE}" name)
  get_target_property(value ${target} ${name})

  if (value)
    foreach(item ${value})
      list(APPEND flags "-D${item}")
    endforeach()
  endif()
  get_directory_property(value INCLUDE_DIRECTORIES)
  if (value)
    foreach(item ${value})
      list(APPEND flags "-I${item}")
    endforeach()
  endif()
  #separate_arguments(flags)
endmacro()

function(add_clang_tool_targets target_name source_files header_files)
    add_custom_target("${target_name}-format" COMMAND ${CLANG_FORMAT} -i -style=file ${source_files} ${header_files})
    get_gcc_compile_flags(${target_name} compiler_commands)
    get_target_property(compiler_options ${target_name}  COMPILE_OPTIONS)
    add_custom_target("${target_name}-tidy" COMMAND ${CLANG_TIDY} -p build ${source_files} ${header_files} -- ${compiler_commands} ${compiler_options})
endfunction()
